#labels Documentation
#summary Documentation for content in the libs package.
_Package: 'libs'_ 

This file is part of the A.W.S.O.M.E.cms distribution.
Detailed copyright and licensing information can be found
in the doc/COPYRIGHT and doc/LICENSE files which should be
included in the distribution.
== Contents: ==
The following classes are located in this package
=== Classes: ===
== BElement ==
===== ,,class,, !BElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====
This file contains All the supported BBCodeElements and all methods that
are defined are overwrites from BBCodeElement
 ==== *public* _void_ *`wrap`* (  ) ====
== UElement ==
===== ,,class,, !UElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
== IElement ==
===== ,,class,, !IElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
== H1Element ==
===== ,,class,, !H1Element ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
 ==== *public* _void_ *`isBlock`* (  ) ====
 ==== *public* _void_ *`mayContainPars`* (  ) ====
== H2Element ==
===== ,,class,, !H2Element ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
 ==== *public* _void_ *`isBlock`* (  ) ====
 ==== *public* _void_ *`mayContainPars`* (  ) ====
== H3Element ==
===== ,,class,, !H3Element ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
 ==== *public* _void_ *`isBlock`* (  ) ====
 ==== *public* _void_ *`mayContainPars`* (  ) ====
== ImgElement ==
===== ,,class,, !ImgElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
== YoutubeElement ==
===== ,,class,, !YoutubeElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
== UrlElement ==
===== ,,class,, !UrlElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
== EmailElement ==
===== ,,class,, !EmailElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
== LeftElement ==
===== ,,class,, !LeftElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
 ==== *public* _void_ *`isBlock`* (  ) ====
== RightElement ==
===== ,,class,, !RightElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
 ==== *public* _void_ *`isBlock`* (  ) ====
== CenterElement ==
===== ,,class,, !CenterElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
 ==== *public* _void_ *`isBlock`* (  ) ====
== ListElement ==
===== ,,class,, !ListElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
== ItemElement ==
===== ,,class,, !ItemElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====

 ==== *public* _void_ *`wrap`* (  ) ====
 ==== *public* _void_ *`singelLine`* (  ) ====
== BBCodeException ==
===== ,,class,, !BBCodeException ,,extends,, `Exception` =====
Exception which is triggered if something goes wrong
== BBCodeElement ==
===== ,,class,, !BBCodeElement =====
And BBCode element which is linked to an HTML element
 ==== *public* _void_ *`__construct`* ( _string_ `$type` ) ====
  Constructor
 ==== *public* *static* _BBCodeElement_ *`init`* ( _string_ `$tag` ) ====
  Init an element dynamicly based on the tag
 ==== *public* *static* _array_ *`parseTag`* ( _string_ `$tag` ) ====
  Parse the tag name for type and arguments passed

where the first element is the tag and the second a key value array with arguments
 ==== *public* _BBCodeElement_ *`getParent`* (  ) ====
  Get the parent or null if not set

NOTE: this is only set when added to another element using the BBCodeElement::addChild()
 ==== *public* _bool_ *`singelLine`* (  ) ====
  Check if the element doesn't need a closing tag and can only be a singel line
 ==== *public* _bool_ *`singelTag`* (  ) ====
  Check if the element doesn't need a closing tag
 ==== *public* _void_ *`addChild`* ( _BBCodeElement_ `$child` ) ====
  Add a Child to the element
 ==== *public* _BBCodeElement_ *`getLastChild`* (  ) ====
  Get the last child in this element

NOTE: if there is no child, this will return a BBCodeDummyElement rather then null or false
 ==== *public* _void_ *`setAttr`* ( _string_ `$key`, _string_ `$value` ) ====
  Set an attribute on this element
 ==== *public* _bool_ *`hasAttr`* ( _string_ `$key` ) ====
  Check if the element has an attribute set
 ==== *public* _string_ *`getAttr`* ( _string_ `$key` ) ====
  Get an attribute of this element
 ==== *public* _string_ *`type`* (  ) ====
  Get the type of this element, this is the tag used in the BBCode
 ==== *public* _bool_ *`isBlock`* (  ) ====
  Check if this is a block element
 ==== *protected* _bool_ *`mayContainPars`* (  ) ====
  Check if the element may contain paragraphs.
Overwrite this in your elements
 ==== *protected* _void_ *`wrap`* ( _string_ `$text` ) ====
  Wrap the content of the element
 ==== *public* _void_ *`text2par`* (  ) ====
  Wrap paragraphs around groups of elements and create new ones on new line elements
 ==== *public* _string_ *`text`* (  ) ====
  Get the HTML, including the wrapping, of the element
 ==== *public* _string_ *`valueOf`* ( _string_ `$level`, _int_ `$i` ) ====
  Debug for showing the element tree from this element
 ==== *public* _void_ *`removeTrailingBreak`* (  ) ====
  Remove trailing breaks so don't end a block with a return
== BBCodeDocument ==
===== ,,class,, !BBCodeDocument ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====
BBCode Document root
 ==== *public* _void_ *`__construct`* (  ) ====
  Constructor
 ==== *public* _string_ *`valueOf`* ( _string_ `$level`, _int_ `$i` ) ====
  Debug for showing the element tree from this element
== BBCodeDummyElement ==
===== ,,class,, !BBCodeDummyElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====
Dummy element, this is used for checking stuff
 ==== *public* _void_ *`__construct`* (  ) ====
  Constructor
 ==== *public* _string_ *`text`* (  ) ====
  Get the HTML, including the wrapping, of the element
== BBCodeText ==
===== ,,class,, !BBCodeText ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====
Element which only contains text
 ==== *public* _void_ *`__construct`* (  ) ====
  Constructor
 ==== *public* _string_ *`text`* (  ) ====
  Get the HTML, including the wrapping, of the element
== BBCodeNewLine ==
===== ,,class,, !BBCodeNewLine ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====
Element which indecates a new line
 ==== *public* _void_ *`__construct`* (  ) ====
  Constructor
 ==== *public* _string_ *`text`* (  ) ====
  Get the HTML, including the wrapping, of the element
== BBCodeParagraph ==
===== ,,class,, !BBCodeParagraph ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====
Element which is a paragraph in the document
 ==== *public* _void_ *`__construct`* (  ) ====
  Constructor
 ==== *protected* _void_ *`wrap`* ( _string_ `$text` ) ====
  Wrap the content of the element
== BBCodeUnknownElement ==
===== ,,class,, !BBCodeUnknownElement ,,extends,, `[DOC_Libs#BBCodeElement BBCodeElement]` =====
Element which is a handler when there is no element to be found
 ==== *protected* _void_ *`wrap`* ( _string_ `$text` ) ====
  Wrap the content of the element
 ==== *public* _string_ *`serializeAttr`* (  ) ====
  Create a string which we can use as smarty params
 ==== *public* _bool_ *`singelTag`* (  ) ====
  Check if the element doesn't need a closing tag
== BBCodeParser ==
===== ,,class,, !BBCodeParser =====
The BBCodeParser which does the actual work
 ==== *public* *static* _string_ *`parse`* ( _string_ `$text` ) ====
  Parse a string into a XHTML valid string
 ==== *private* _void_ *`__construct`* ( _string_ `$text` ) ====
  Constructor
 ==== *private* _string_ *`process`* (  ) ====
  Process the given string and return a XHTML string
== CLIAction ==
===== _abstract_ ,,class,, !CLIAction =====
CliAction interface
 ==== _void_ *`setup`* ( _CLI_ `$cli` ) ====
  Setup function, you can override this to add setup stuff. This is
called before the exec
 ==== _void_ *`cleanup`* ( _CLI_ `$cli` ) ====
  Cleanup function, you can override this to add cleanup stuff. This is
called after the exec
== OS ==
===== ,,class,, !OS =====
OS abstraction, this provides a way to easiely join a path
 ==== *public* _string_ *`join`* ( _`*`_ `String ...`, _`*`_ `String ...` ) ====
  Join a series of path elements together in an OS safe way
== CLI ==
===== ,,class,, !CLI =====
Cli main class
 ==== *public* _void_ *`__construct`* ( _array_ `$argv` ) ====
  Constructor
 ==== *private* _array_ *`parseArgv`* ( _array_ `$argv` ) ====
  Parse the argument variables
 ==== *public* _void_ *`setVerbose`* ( _bool_ `$verbose` ) ====
  Set the CLI interface to verbose, all output will not be shown.
 ==== *public* _bool_ *`isVerbose`* (  ) ====
  Check if the CLI interface is verbose
 ==== *public* _string_ *`getArg`* ( _string_ `$key` ) ====
  Get a value from the arguments
 ==== *public* _string_ *`prompt`* ( _string_ `$question`, _string_ `$pattern` ) ====
  Show a question, if the pattern is not valid, the question will be
asked again.
 ==== *public* _bool_ *`confirm`* ( _string_ `$question` ) ====
  Show a Confirm (yes/no).
 ==== *public* _void_ *`output`* ( _string_ `$message`, _bool_ `$sameline` ) ====
  Output something in the CLI interface
 ==== *public* _void_ *`doAction`* (  ) ====
  Do an action
 ==== *private* _void_ *`callAction`* ( _string_ `$action` ) ====
  Call an action
 ==== *public* _void_ *`registerAction`* ( _string_ `$action`, _string_ `$class` ) ====
  Register an action
 ==== *public* _void_ *`header`* (  ) ====
  Show the header info
 ==== *private* _void_ *`_header`* (  ) ====
  Fallback when there was no header
== CronParser ==
===== ,,class,, !CronParser =====
Parser for cron time string
 ==== *public* _array_ *`mustRunNow`* ( _string_ `$cronTime`, _int_ `$now` ) ====
  Check if a string must run now
 ==== *private* _bool_ *`check`* ( _string_ `$cronValue`, _string_ `$timeValue` ) ====
  Check if the time value is in the list of items
 ==== *private* _array_ *`parseTimeString`* ( _string_ `$cronTime` ) ====
  Parse a cron time string
 ==== *private* _array_ *`parseNumberString`* ( _string_ `$timeString` ) ====
  Parse a set of numbers
== FTP ==
===== ,,class,, !FTP =====
Helper class for uploading stuff using FTP
 ==== *public* *static* _FTP_ *`getInstance`* (  ) ====
  Singelton
 ==== *private* _void_ *`__construct`* (  ) ====
  Constructor
 ==== *private* _void_ *`openConnection`* (  ) ====
  Open connection to the FTP server, throws exception if connecton failed
 ==== *public* _void_ *`__destruct`* (  ) ====
  Descructor, which closes the connection
 ==== *public* _string_ *`upload`* ( _string_ `$source`, _string_ `$dest` ) ====
  Upload a directory to the FTP server, throws exception if failed
 ==== *private* _void_ *`makeDir`* ( _`*`_ `$dest` ) ====
  Make a folder on the FTP server
== TableInfo ==
===== ,,class,, !TableInfo =====
Wrapper for the table info in the info files, these can contain options
 ==== *public* _void_ *`__construct`* ( _string_ `$ID` ) ====
  Constructor
 ==== *public* _bool_ *`hasOption`* ( _string_ `$key` ) ====
  Check if an option was set
 ==== *public* _string_ *`getName`* (  ) ====
  Get the name of the table
 ==== *public* _string_ *`__toString`* (  ) ====
  To String, this is called when cast to string
== InstallHelper ==
===== ,,class,, !InstallHelper =====
Helper class for installing and managing components
 ==== *public* _bool_ *`downloadAndInstall`* ( _string_ `$source`, _string_ `$root` ) ====
  Download and install a component. Returns True on success and False on error
 ==== *public* _array_ *`installComponent`* ( _string_ `$component`, _bool_ `$installAdmin` ) ====
  Install a component
 ==== *public* _void_ *`runPatches`* ( _string_ `$component` ) ====
  Run the patches for a given component
 ==== *public* _int_ *`getHighestPatchLevel`* ( _string_ `$installDir` ) ====
  Get the highest patch number for a given folder
 ==== *public* _bool_ *`is_numeric_keys`* ( _array_ `$array` ) ====
  Check if an array has numeric keys
 ==== *public* _string_ *`arrayToIni`* ( _array_ `$array` ) ====
  convert a array to ini format
 ==== *public* _void_ *`rcopy`* ( _string_ `$source`, _string_ `$dest`, _bool_ `$override` ) ====
  Recusively copy a directory
 ==== *public* _void_ *`uninstall`* ( _string_ `$component` ) ====
  Uninstall a component
TODO: Implement
 ==== *public* _void_ *`remove`* ( _string_ `$source` ) ====
  remove a directorcy and it's content
 ==== *public* *static* _bool_ *`hasSVN`* (  ) ====
  Check if SVN is avalible through the commandline
 ==== *public* _bool_ *`svn_up2date`* ( _string_ `$folder` ) ====
  Check if a folder is up-to-date

NOTE: this is a very slow because it needs to access the server over
HTTP. it is not recommended to do often in one call because the running
time will be quite a lot.
 ==== *public* _void_ *`dumpTable`* ( _string_ `$oldFileContent`, _string_ `$tables` ) ====
  Create an XML given a older version of the XML, tables are gathered
from the XML and the $tables field
 ==== *public* _bool_ *`loadTable`* ( _string_ `$content` ) ====
  Sync a database file with the database, returns true if there was
anything to sync, else false
 ==== *public* _bool_ *`isNotChanged`* ( _DOMElement_ `$field`, _object_ `$row` ) ====
  Check if a DOMElement and the field row from the DB have the same values
 ==== *public* _void_ *`raddFileToZip`* ( _string_ `$source`, _string_ `$dest`, _string_ `$zip` ) ====
  Recusrivly add files to a zip archive
 ==== *public* _void_ *`clearDir`* ( _string_ `$source`, _array_ `$exlude` ) ====
  Clear a dir with files, an exlude list is optional
 ==== *public* _bool_ *`dir2zip`* ( _string_ `$source`, _string_ `$dest` ) ====
  Pack a directory into a zip file
 ==== *public* _int_ *`getHightestRevNumber`* ( _string_ `$source` ) ====
  Get the highest revsion number
 ==== *public* _void_ *`generateInstallFiles`* ( _string_ `$components` ) ====
  Generate the install XML's for each given component
== TextSpider ==
===== ,,class,, !TextSpider =====
Spider class for indexing and searching in the text items
 ==== *public* _void_ *`__construct`* (  ) ====
  Constructor
 ==== *public* _void_ *`index`* ( _string_ `$string`, _int_ `$link`, _string_ `$hook` ) ====
  Index a text block, the found words and matches are stored in the database
 ==== *public* _void_ *`clearByID`* (  ) ====
 ==== *public* _void_ *`clearByHook`* (  ) ====
 ==== *public* _void_ *`clearByLink`* (  ) ====
 ==== *private* _int_ *`getID`* ( _string_ `$word` ) ====
  Get the ID that comes with a word
 ==== *private* _void_ *`addNewWords`* (  ) ====
  Add the new found words (after indexing) to the database
 ==== *public* _string_ *`procesWord`* ( _string_ `$word` ) ====
  Parse a word before proccessing
 ==== *public* _array_ *`search`* ( _array_ `$words` ) ====
  Search for items that are indexed
 ==== *private* _int_ *`sort`* ( _object_ `$a`, _object_ `$b` ) ====
  Helper for sorting items based on rank
